name: Singularity Build
on:
  push:
    branches:
      - main
    paths:
      - Dockerfile

  pull_request:
    paths:
      - Dockerfile

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SINGULARITY_VERSION: v3.10.2
  SECRET: ${{ secrets.GITHUB_TOKEN }}
  ACTOR: ${{ github.actor }}

jobs:
  build-singularity:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3

      - name: Build Docker container
        run: docker build -t temp .



      - name: Convert to Singularity
        run: |
          docker run -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd):/data \
          --privileged -t --rm \
          quay.io/singularity/singularity:${{ env.SINGULARITY_VERSION }} \
          build /data/container.sif docker-daemon://temp:latest

      - name: Login and Deploy Container
        # if: github.event_name != 'pull_request'
        run: |
          docker run \
          -v $(pwd):/data \
          -t --rm \
          --entrypoint '/bin/bash' \
          quay.io/singularity/singularity:${{ env.SINGULARITY_VERSION }} \
          -c 'echo ${{ secrets.GITHUB_TOKEN }} | singularity remote login -u ${{ github.actor }} --password-stdin oras://${{ env.REGISTRY }} && singularity push /data/container.sif oras://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'

  build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ format('{0}-docker', steps.meta.outputs.tags) }}
          labels: ${{ steps.meta.outputs.labels }}